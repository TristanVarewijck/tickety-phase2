import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState } from 'react';

function CrawlerTest() {
  const [listings, setListings] = useState(null); 
  const [isLoading, setIsLoading] = useState(false); 

  const crawlWithPuppeteer = async (endpoint) => {
      try {
        setIsLoading(true);
        const res = await fetch("http://127.0.0.1:5001/tickety-85fd7/us-central1/crawlWithPuppeteer", {
          method: "POST", 
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({url: endpoint})
        })
  
        const data = await res.json(); 
        setListings(data);
        setIsLoading(false);
        
      } catch (error) {
        console.error(error); 
        setIsLoading(false); 
      }
    }
 

  return (
    <>
      <Head>
        <title>Tickety - api</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

      <h1>Seatgeek listings web-scraper</h1>
      <div className='button-group'>
      <button disabled={isLoading} style={isLoading ? {opacity: "0.5"} : {opacity: "1"}} onClick={() => crawlWithPuppeteer("white-sox-at-yankees-premium-seating-tickets/6-7-2023-bronx-new-york-yankee-stadium/mlb/5949655")}>Chicago White Sox at New York Yankees <br /> (premium)</button>
      <button disabled={isLoading}  style={isLoading ? {opacity: "0.5"} : {opacity: "1"}} onClick={() => crawlWithPuppeteer("red-sox-at-yankees-tickets/6-9-2023-bronx-new-york-yankee-stadium/mlb/5785326")}>Boston Red Sox at New York Yankees</button>
      <button disabled={isLoading}  style={isLoading ? {opacity: "0.5"} : {opacity: "1"}} onClick={() => crawlWithPuppeteer("giants-at-dodgers-tickets/6-17-2023-los-angeles-california-dodger-stadium/mlb/5785166")}>San Francisco Giants at Los Angeles Dodgers</button>
      </div>
     

      
      <h3>{isLoading && "loading..."}</h3>
      <div className='content-json' style={isLoading ? {opacity: "0.5"} : {opacity: "1"}}>
        <ul>
        {listings && listings.map((object, index) => {
         return <li key={index}>
          {Object.entries(object).map(([key, value]) => (
            <div key={key}>
              {key}: {value}
            </div>
          ))}
         </li>
      })}
        </ul>
      </div>
      </main>
    </>
  )
}

export default CrawlerTest; 
